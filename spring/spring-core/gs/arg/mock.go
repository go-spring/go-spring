// Code generated by MockGen. DO NOT EDIT.
// Source: arg.go

// Package arg is a generated GoMock package.
package arg

import (
	reflect "reflect"

	cond "github.com/go-spring/spring-core/gs/cond"
	gomock "github.com/golang/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockContext) Bind(v reflect.Value, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", v, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockContextMockRecorder) Bind(v, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockContext)(nil).Bind), v, tag)
}

// Matches mocks base method.
func (m *MockContext) Matches(c cond.Condition) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", c)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Matches indicates an expected call of Matches.
func (mr *MockContextMockRecorder) Matches(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockContext)(nil).Matches), c)
}

// Wire mocks base method.
func (m *MockContext) Wire(v reflect.Value, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wire", v, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wire indicates an expected call of Wire.
func (mr *MockContextMockRecorder) Wire(v, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wire", reflect.TypeOf((*MockContext)(nil).Wire), v, tag)
}

// MockArg is a mock of Arg interface.
type MockArg struct {
	ctrl     *gomock.Controller
	recorder *MockArgMockRecorder
}

// MockArgMockRecorder is the mock recorder for MockArg.
type MockArgMockRecorder struct {
	mock *MockArg
}

// NewMockArg creates a new mock instance.
func NewMockArg(ctrl *gomock.Controller) *MockArg {
	mock := &MockArg{ctrl: ctrl}
	mock.recorder = &MockArgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArg) EXPECT() *MockArgMockRecorder {
	return m.recorder
}
