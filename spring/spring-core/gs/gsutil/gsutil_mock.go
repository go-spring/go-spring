// Code generated by MockGen. DO NOT EDIT.
// Source: gsutil.go

// Package gsutil is a generated GoMock package.
package gsutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBeanSelector is a mock of BeanSelector interface.
type MockBeanSelector struct {
	ctrl     *gomock.Controller
	recorder *MockBeanSelectorMockRecorder
}

// MockBeanSelectorMockRecorder is the mock recorder for MockBeanSelector.
type MockBeanSelectorMockRecorder struct {
	mock *MockBeanSelector
}

// NewMockBeanSelector creates a new mock instance.
func NewMockBeanSelector(ctrl *gomock.Controller) *MockBeanSelector {
	mock := &MockBeanSelector{ctrl: ctrl}
	mock.recorder = &MockBeanSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeanSelector) EXPECT() *MockBeanSelectorMockRecorder {
	return m.recorder
}

// MockBeanDefinition is a mock of BeanDefinition interface.
type MockBeanDefinition struct {
	ctrl     *gomock.Controller
	recorder *MockBeanDefinitionMockRecorder
}

// MockBeanDefinitionMockRecorder is the mock recorder for MockBeanDefinition.
type MockBeanDefinitionMockRecorder struct {
	mock *MockBeanDefinition
}

// NewMockBeanDefinition creates a new mock instance.
func NewMockBeanDefinition(ctrl *gomock.Controller) *MockBeanDefinition {
	mock := &MockBeanDefinition{ctrl: ctrl}
	mock.recorder = &MockBeanDefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeanDefinition) EXPECT() *MockBeanDefinitionMockRecorder {
	return m.recorder
}

// BeanName mocks base method.
func (m *MockBeanDefinition) BeanName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeanName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BeanName indicates an expected call of BeanName.
func (mr *MockBeanDefinitionMockRecorder) BeanName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeanName", reflect.TypeOf((*MockBeanDefinition)(nil).BeanName))
}

// Created mocks base method.
func (m *MockBeanDefinition) Created() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Created")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Created indicates an expected call of Created.
func (mr *MockBeanDefinitionMockRecorder) Created() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockBeanDefinition)(nil).Created))
}

// ID mocks base method.
func (m *MockBeanDefinition) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockBeanDefinitionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBeanDefinition)(nil).ID))
}

// Interface mocks base method.
func (m *MockBeanDefinition) Interface() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interface")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Interface indicates an expected call of Interface.
func (mr *MockBeanDefinitionMockRecorder) Interface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interface", reflect.TypeOf((*MockBeanDefinition)(nil).Interface))
}

// Type mocks base method.
func (m *MockBeanDefinition) Type() reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockBeanDefinitionMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockBeanDefinition)(nil).Type))
}

// TypeName mocks base method.
func (m *MockBeanDefinition) TypeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TypeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TypeName indicates an expected call of TypeName.
func (mr *MockBeanDefinitionMockRecorder) TypeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TypeName", reflect.TypeOf((*MockBeanDefinition)(nil).TypeName))
}

// Value mocks base method.
func (m *MockBeanDefinition) Value() reflect.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(reflect.Value)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockBeanDefinitionMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockBeanDefinition)(nil).Value))
}

// Wired mocks base method.
func (m *MockBeanDefinition) Wired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Wired indicates an expected call of Wired.
func (mr *MockBeanDefinitionMockRecorder) Wired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wired", reflect.TypeOf((*MockBeanDefinition)(nil).Wired))
}
