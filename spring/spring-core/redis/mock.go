// Code generated by MockGen. DO NOT EDIT.
// Source: conn.go

// Package redis is a generated GoMock package.
package redis

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnPool is a mock of ConnPool interface.
type MockConnPool struct {
	ctrl     *gomock.Controller
	recorder *MockConnPoolMockRecorder
}

// MockConnPoolMockRecorder is the mock recorder for MockConnPool.
type MockConnPoolMockRecorder struct {
	mock *MockConnPool
}

// NewMockConnPool creates a new mock instance.
func NewMockConnPool(ctrl *gomock.Controller) *MockConnPool {
	mock := &MockConnPool{ctrl: ctrl}
	mock.recorder = &MockConnPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnPool) EXPECT() *MockConnPoolMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockConnPool) Exec(ctx context.Context, cmd string, args []interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, cmd, args)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockConnPoolMockRecorder) Exec(ctx, cmd, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockConnPool)(nil).Exec), ctx, cmd, args)
}
