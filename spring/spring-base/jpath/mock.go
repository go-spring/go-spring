// Code generated by MockGen. DO NOT EDIT.
// Source: jpath.go

// Package jpath is a generated GoMock package.
package jpath

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPath is a mock of Path interface.
type MockPath struct {
	ctrl     *gomock.Controller
	recorder *MockPathMockRecorder
}

// MockPathMockRecorder is the mock recorder for MockPath.
type MockPathMockRecorder struct {
	mock *MockPath
}

// NewMockPath creates a new mock instance.
func NewMockPath(ctrl *gomock.Controller) *MockPath {
	mock := &MockPath{ctrl: ctrl}
	mock.recorder = &MockPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPath) EXPECT() *MockPathMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockPath) Read(val interface{}) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", val)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockPathMockRecorder) Read(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPath)(nil).Read), val)
}
